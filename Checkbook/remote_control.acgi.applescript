(*remote_control.acgiDavid GaxiolaThis is the main server for the words + website juxtaposition projectI called "Checkbook" as party of my 4.643J final project.The idea is that an innoculous phrase as an image will lead to a web site that give the phrase some double meaning.It's not very complex but in 1995 these concepts were new.The structure was fine grained enough to allow for different versions of site or perhaps replaying past combinations but that functionality was never added.*)-- properties (globals!)property database_name : alias "Path:To:Database:Final Project Sites"property picturewords_dir : alias "Path:To:Images:PictureWords"property crlf : (ASCII character 13) & (ASCII character 10)property http_10_header : "HTTP/1.0 200 OK" & crlf & "Server: MacHTTP" & crlf & Â	"MIME-Version: 1.0" & crlf & "Content-type: text/html" & crlf & crlf-- on handleon handle CGI request path_args Â	searching for http_search_args with posted data post_args using access method method from address client_address from user username using password |password| with user info from_user from server server_name via port server_port executing by script_name of content type content_type referred by referer from browser user_agent	-- This is WEIRD syntax. What it really means is that you have the variables	--   path_args, http_search_args, client_address, username,  password, etc. to play with.	--   They are all strings.		try 	    -- Wrap the whole script in an error handler.		-- Build the URL of this script.		set this_url to "http://" & server_name & ":" & server_port & script_name				-- Decode the %20 encoded space (if any) in the path_args, so we have 2 words like		-- "DELETE 123" or "RETRIEVE 456" in path_args. Note that ADD and FIND only have		-- one word in path_args.		set path_args to Decode URL path_args				-- See what command we're being asked to perform.		if http_search_args = "" then			return http_10_header & crlf		else if http_search_args is "NEW" then 		    -- Make a new journey.			return http_10_header & MakeNewJourney() & crlf		end if			on error msg number num	    -- Report the error message and number to the WWW client.		return http_10_header & "Error " & num & ", " & msg	end tryend handle CGI request-- on MakeNewJourney-- Select a random phrase image and a final destination and make an HTML document for it.on MakeNewJourney()	set chosen_words to ""	tell application "Finder"		set pw_files to the files in alias "Path:To:Images:PictureWords"		set chosen_words to item (random number from 1 to count of pw_files) of pw_files as string	end tell		set fd_url to GetFinalDestination()	set words_imgsrc to MakeImg(chosen_words)	set journey_doc to MakePreamble() & MakeDestinationLink(fd_url, words_imgsrc) & MakeConclusion()		return journey_docend MakeNewJourney-- on MakePreamble-- Common HTML page start.on MakePreamble()	return "<html><title></title><body>" & crlfend MakePreamble-- on MakeConclusion-- Common HTML page end.on MakeConclusion()	return "</body></html>"end MakeConclusion-- on MakeImg-- Build the image HTML from the actual file path.on MakeImg(image_path)	-- The image_path is in the standard Mac ":" format.	set tip to tokenize image_path with delimiters {":"}	set image_only to the last item of tip		return "<img src=\"http://SERVER_ADDRESS/PictureWords/" & image_only & "\">" & crlfend MakeImg-- on MakeDestinationLink-- Build the anchor HTML given the target URL and image HTML.on MakeDestinationLink(fd_url, included_image)	return "<a href=\"" & fd_url & "\">" & included_image & "</a>" & crlfend MakeDestinationLink-- on GetFinalDestination-- Pull a random target URL from the local database.on GetFinalDestination()	tell application "FileMaker Pro 2.1"		activate		Open database_name		set site_count to the Count of Records		set random_url to Cell 1 of Record (random number from 1 to site_count)		return random_url	end tellend GetFinalDestination